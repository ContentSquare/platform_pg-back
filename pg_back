#!/bin/sh

#
# Copyright 2011-2015 Nicolas Thauvin. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# hardcoded defaults
PGBK_CONFIG="/etc/postgresql/pg_back.conf"
PGBK_BACKUP_DIR=/var/backups/postgresql
PGBK_TIMESTAMP="%Y-%m-%d_%H-%M-%S"
PGBK_PURGE=30
PGBK_OPTS="-Fc"
PGBK_WITH_TEMPLATES="no"
PGBK_CONNDB="postgres"

usage() {
    echo "PostgreSQL simple backup script"
    echo "usage: `basename $0` [OPTIONS] [DBNAME]..."
    echo "options:"
    echo "  -b dir        store dump files there (default: \"$PGBK_BACKUP_DIR\")"
    echo "  -c config     alternate config file (default: \"$PGBK_CONFIG\")"
    echo "  -P time       purge old backup, see find -ctime (default: \"$PGBK_PURGE\")"
    echo "  -D db1,...    list of databases to exclude"
    echo "  -t            include templates"
    echo 
    echo "  -h hostname   database server host or socket directory (default: \"${PGHOST:-local socket}\")"
    echo "  -p port       database server port (default: \"$PGPORT\")"
    echo "  -U username   database user name (default: \"$PGUSER\")"
    echo "  -d db         database used for connection (default: \"$PGBK_CONNDB\")"
    echo
    echo "  -V            print version"
    echo "  -?            print usage"
    echo
    exit $1
}

args=`getopt "b:c:P:D:th:p:U:d:V?" $*`
if [ $? -ne 0 ]
then
    usage 2
fi

set -- $args
for i in $*
do
    case "$i" in
	-b) CLI_BACKUP_DIR=$2; shift 2;;
	-c) PGBK_CONFIG=$2; shift 2;;
	-P) CLI_PURGE=$2; shift 2;;
	-D) CLI_EXCLUDE="`echo $2 | tr ',' ' '`"; shift 2;;
	-t) CLI_WITH_TEMPLATES="yes"; shift;;
	-h) CLI_HOSTNAME=$2; shift 2;;
	-p) CLI_PORT=$2; shift 2;;
	-d) CLI_CONNDB=$2; shift 2;;
	-U) CLI_USERNAME=$2; shift 2;;
	-V) echo "pg_back version 1.1"; exit 1;;
	-\?) usage 1;;
	--) shift; break;;
    esac
done

CLI_DBLIST=$*

# Load configuration
if [ -f "$PGBK_CONFIG" ]; then
    . $PGBK_CONFIG
fi

# The backup directory overrides the one in the config file
if [ -n "$CLI_BACKUP_DIR" ]; then
    PGBK_BACKUP_DIR=$CLI_BACKUP_DIR
fi

# Override configuration with cli options
[ -n "$CLI_PURGE" ] && PGBK_PURGE=$CLI_PURGE
[ -n "$CLI_EXCLUDE" ] && PGBK_EXCLUDE=$CLI_EXCLUDE
[ -n "$CLI_WITH_TEMPLATES" ] && PGBK_WITH_TEMPLATES=$CLI_WITH_TEMPLATES
[ -n "$CLI_HOSTNAME" ] && PGBK_HOSTNAME=$CLI_HOSTNAME
[ -n "$CLI_PORT" ] && PGBK_PORT=$CLI_PORT
[ -n "$CLI_USERNAME" ] && PGBK_USERNAME=$CLI_USERNAME
[ -n "$CLI_DBLIST" ] && PGBK_DBLIST=$CLI_DBLIST
[ -n "$CLI_CONNDB" ] && PGBK_CONNDB=$CLI_CONNDB

# Prepare common options for pg_dump and pg_dumpall
[ -n "$PGBK_HOSTNAME" ] && OPTS="$OPTS -h $PGBK_HOSTNAME"
[ -n "$PGBK_PORT" ] && OPTS="$OPTS -p $PGBK_PORT"
[ -n "$PGBK_USERNAME" ] && OPTS="$OPTS -U $PGBK_USERNAME"

# Ensure there is a trailing slash in the path to the binaries
if [ -n "$PGBK_BIN" ]; then
    PGBK_BIN=$PGBK_BIN/
    # Also, it must exist
    if [ ! -d "$PGBK_BIN" ]; then
	echo "$PGBK_BIN directory does not exists."
	exit 1
    fi
fi

# Create the backup directory if missing
if [ ! -d $PGBK_BACKUP_DIR ]; then
    mkdir -p $PGBK_BACKUP_DIR
    if [ $? != 0 ]; then
	echo "Unable to create $PGBK_BACKUP_DIR. Aborting."
	exit 1
    fi
fi

# Check if replay pause is available
PG_HASPAUSE=`${PGBK_BIN}psql $OPTS -At -c "SELECT 1 FROM pg_proc WHERE proname='pg_xlog_replay_pause' AND pg_is_in_recovery();" $PGBK_CONNDB`
if [ $? != 0 ]; then
    echo "could not check for pause"
    exit 1
fi

# Pause replay if dumping from a slave
if [ "${PG_HASPAUSE}" = "1" ]; then
    ${PGBK_BIN}psql $OPTS -At -c "SELECT pg_xlog_replay_pause() where pg_is_in_recovery();" $PGBK_CONNDB
    if [ $? != 0 ]; then
        echo "could not pause replay"
        exit 1
    fi
fi

# Dump roles and tablespaces first
${PGBK_BIN}pg_dumpall $OPTS -g > $PGBK_BACKUP_DIR/pg_global_`date "+${PGBK_TIMESTAMP}"`.sql
if [ $? != 0 ]; then
    echo "pg_dumpall failed."
    out_rc=1
fi

# Prepare the list of databases to dump
if [ -z "$PGBK_DBLIST" ]; then
    if [ "$PGBK_WITH_TEMPLATES" = "yes" ]; then
	DB_QUERY="SELECT datname FROM pg_database WHERE datallowconn;"
    else
	DB_QUERY="SELECT datname FROM pg_database WHERE datallowconn AND NOT datistemplate;"
    fi

    PGBK_DBLIST=`${PGBK_BIN}psql $OPTS -At -c "$DB_QUERY" $PGBK_CONNDB`
    if [ $? != 0 ]; then
	echo "could not list databases."
	exit 1
    fi
fi

for db in $PGBK_DBLIST
do
    # Do not dump excluded databases
    echo $PGBK_EXCLUDE | grep -w $db >/dev/null 2>&1
    if [ $? = 0 ]; then
	continue
    fi

    # Force the exclusion of template0, because connection to template0 are
    # disabled by default
    echo $PGBK_EXCLUDE | grep -w template0  >/dev/null 2>&1
    if [ $? = 0 ]; then
	continue
    fi

    # Dump
    ${PGBK_BIN}pg_dump $OPTS $PGBK_OPTS -f $PGBK_BACKUP_DIR/${db}_`date "+${PGBK_TIMESTAMP}"`.dump $db
    rc=$?
    if [ $rc != 0 ]; then
	out_rc=1
	echo "pg_dump of $db failed."
    fi
done

# Resume replay if dumping from a slave
if [ "${PG_HASPAUSE}" = "1" ]; then
    ${PGBK_BIN}psql $OPTS -At -c "SELECT pg_xlog_replay_resume();" $PGBK_CONNDB
    if [ $? != 0 ]; then
        echo "could not resume replay"
        exit 1
    fi
fi

[ -z "$out_rc" ] && out_rc=0

# Purge old backups, only if current backup succeeded
if [ "$out_rc" = 0 ]; then
    find $PGBK_BACKUP_DIR -maxdepth 1 -mtime +$PGBK_PURGE -exec rm -rf '{}' ';'
fi

exit $out_rc

