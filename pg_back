#!/bin/sh

# hardcoded defaults
PGBK_CONFIG="/etc/postgresql/pg_back.conf"
PGBK_BACKUP_DIR=/var/backups/postgresql
PGBK_TIMESTAMP=`date '+%Y%m%d_%H%M%S'`
PGBK_PURGE=30
PGBK_OPTS="-Fc"

usage() {
    echo "PostgreSQL simple backups script"
    echo "Usage: `basename $0` [OPTIONS]"
    echo "Options:"
    echo "    -d dir      Store dump files there (default: $BACKUP_DIR)"
    echo "    -c config   Alternate config file (default: $CONFIG)"
    echo "    -P time     purge old backup (see find -ctime)"
    echo
    exit $1
}

args=`getopt c:d:P:h $*`
if [ $? -ne 0 ]
then
    usage 2
fi

set -- $args
for i in $*
do
    case "$i" in
	-d) CLI_BACKUP_DIR=$2; shift 2;;
	-c) PGBK_CONFIG=$2; shift 2;;
	-P) CLI_PURGE=$2; shift 2;;
	-h) usage 1;;
	--) shift; break;;
    esac
done

# Load configuration
if [ -f "$PGBK_CONFIG" ]; then
    . $PGBK_CONFIG
fi

# The backup directory overrides the one in the config file
if [ -n "$CLI_BACKUP_DIR" ]; then
    PGBK_BACKUP_DIR=$CLI_BACKUP_DIR
fi


# Create the backup directory if missing
PGBK_BACKUP_DIR=$PGBK_BACKUP_DIR/$PGBK_TIMESTAMP
if [ ! -d $PGBK_BACKUP_DIR ]; then
    mkdir -p $PGBK_BACKUP_DIR
    if [ $? != 0 ]; then
	echo "Unable to create $PGBK_BACKUP_DIR. Aborting."
	exit 1
    fi
fi

# Dump roles and tablespaces first
pg_dumpall -g > $PGBK_BACKUP_DIR/pg_global_${PGBK_TIMESTAMP}.sql
if [ $? != 0 ]; then
    echo "pg_dumpall failed."
    out_rc=1
fi

gzip $PGBK_BACKUP_DIR/pg_global_${PGBK_TIMESTAMP}.sql

# Dump all databases in a separated file
DB_LIST=`mktemp -t pg_back.XXX`
if [ $? != 0 ]; then
    echo "could not create temp file."
    exit 1
fi

psql -lt > $DB_LIST
if [ $? != 0 ]; then
    echo "could not list databases."
    exit 1
fi

awk '$1 !~ /(template[01]|^$|\|)/ { print $1}' $DB_LIST | while read db
do
    pg_dump $PGBK_OPTS -f $PGBK_BACKUP_DIR/pg_${PGBK_TIMESTAMP}_$db.pgdump $db
    rc=$?
    if [ $rc != 0 ]; then
	[ -z "$out_rc" ] && out_rc=1
	echo "pg_dump of $db failed."
    fi
done

# Purge old backups, only if current backup succeded
if [ -n "$out_rc" ]; then
    find $PGBK_BACKUP_DIR -mtime +$PGBK_PURGE -exec rm '{}' ';'
fi

rm $DB_LIST
exit $out_rc